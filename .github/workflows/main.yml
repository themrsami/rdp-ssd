name: RDP Access Workflow

on: [push]

jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Download ngrok
      run: |
        Invoke-WebRequest https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-windows-amd64.zip -OutFile ngrok.zip
        Expand-Archive ngrok.zip -DestinationPath .\ngrok
      shell: pwsh

    - name: Verify ngrok installation
      run: |
        if (Test-Path .\ngrok\ngrok.exe) {
            Write-Host "ngrok.exe exists"
        } else {
            Write-Host "ngrok.exe does not exist"
            Write-Host "Contents of current directory:"
            Get-ChildItem -Recurse
        }
      shell: pwsh

    - name: Check ngrok version
      run: |
        try {
            $ngrokVersion = .\ngrok\ngrok.exe --version
            Write-Host "ngrok version: $ngrokVersion"
        } catch {
            Write-Host "Failed to get ngrok version: $_"
        }
      shell: pwsh

    - name: Start ngrok
      run: |
        try {
            .\ngrok\ngrok.exe authtoken 1ynqMXNZqPHZFJsrK6oJhkOJDgL_7zkwHGXMRfXwSzABCDEF
            Start-Process -FilePath .\ngrok\ngrok.exe -ArgumentList "tcp 3389 --log=stdout" -RedirectStandardOutput ngrok.log -NoNewWindow
            Start-Sleep -Seconds 5
            $ngrokProcess = Get-Process ngrok -ErrorAction SilentlyContinue
            if ($ngrokProcess) {
                Write-Host "ngrok process is running with ID: $($ngrokProcess.Id)"
            } else {
                Write-Host "ngrok process is not running"
            }
        } catch {
            Write-Host "Failed to start ngrok: $_"
        }
      env:
        NGROK_AUTHTOKEN: 1ynqMXNZqPHZFJsrK6oJhkOJDgL_7zkwHGXMRfXwSzABCDEF
      shell: pwsh

    - name: Check ngrok log
      run: |
        if (Test-Path ngrok.log) {
            $logContent = Get-Content ngrok.log
            Write-Host "ngrok log content:"
            Write-Host $logContent
        } else {
            Write-Host "ngrok log file does not exist"
        }
      shell: pwsh

    - name: Get ngrok public URL
      run: |
        if (Test-Path ngrok.log) {
            $logContent = Get-Content ngrok.log
            $tcpUrl = $logContent | Select-String -Pattern "url=tcp://(.+)" | ForEach-Object { $_.Matches.Groups[1].Value }
            if ($tcpUrl) {
                echo "NGROK_PUBLIC_URL=$tcpUrl" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                Write-Host "NGROK_PUBLIC_URL set to $tcpUrl"
            } else {
                Write-Host "Failed to extract TCP URL from ngrok log"
                Write-Host "Log content:"
                Write-Host $logContent
            }
        } else {
            Write-Host "ngrok log file does not exist"
        }
      shell: pwsh

    - name: Verify NGROK_PUBLIC_URL
      run: |
        if ($env:NGROK_PUBLIC_URL) {
            Write-Host "NGROK_PUBLIC_URL is set to: $env:NGROK_PUBLIC_URL"
        } else {
            Write-Host "NGROK_PUBLIC_URL is not set"
        }
      shell: pwsh

    - name: Enable RDP
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
      shell: pwsh

    - name: Set RDP password
      run: |
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)
      shell: pwsh

    - name: Output RDP connection details
      run: |
        if ($env:NGROK_PUBLIC_URL) {
            Write-Host "RDP is now available at $env:NGROK_PUBLIC_URL"
        } else {
            Write-Host "RDP connection URL is not available"
        }
        Write-Host "Username: runneradmin"
        Write-Host "Password: P@ssw0rd!"
      shell: pwsh
